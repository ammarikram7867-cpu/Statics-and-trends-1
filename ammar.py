# -*- coding: utf-8 -*-
"""Ammar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jfm32nK6u6MjpzK6-IEbT5jSzss2mYEL
"""

# Import required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import os

# ------------------------------------------------------------
# 1️ Load Dataset
# ------------------------------------------------------------
df = pd.read_csv("world_bank_dataset.csv")

print("✅ Dataset loaded successfully!")
print("Shape:", df.shape)
print("Columns:", df.columns.tolist())
print("\nSample Data:")
print(df.head())

# ------------------------------------------------------------
# 2️ Basic Data Overview
# ------------------------------------------------------------
print("\nData Info:")
print(df.info())

print("\nMissing Values:")
print(df.isnull().sum())

print("\nDescriptive Statistics:")
print(df.describe(include='all').T)

# ------------------------------------------------------------
# 3️ Data Cleaning
# ------------------------------------------------------------
# Remove duplicates if any
df = df.drop_duplicates()

# Handle missing values if they exist
df = df.fillna(df.median(numeric_only=True))

# Ensure numeric columns have correct data types
num_cols = [
    'GDP (USD)', 'Population', 'Life Expectancy',
    'Unemployment Rate (%)', 'CO2 Emissions (metric tons per capita)',
    'Access to Electricity (%)'
]
for col in num_cols:
    df[col] = pd.to_numeric(df[col], errors='coerce')

# ------------------------------------------------------------
# 4️ Save cleaned dataset (optional)
# ------------------------------------------------------------
df.to_csv("world_bank_dataset_cleaned.csv", index=False)
print("\nCleaned dataset saved as world_bank_dataset_cleaned.csv")

# ------------------------------------------------------------
# 5️ Summary Insights
# ------------------------------------------------------------
print("\nUnique Countries:", df['Country'].nunique())
print("Years Range:", df['Year'].min(), "-", df['Year'].max())

# ------------------------------------------------------------
# Create folder for saving figures
# ------------------------------------------------------------
os.makedirs("figures", exist_ok=True)

def save_fig(name):
    plt.tight_layout()
    plt.savefig(f"{name}.png", dpi=300)
    plt.close()

# ------------------------------------------------------------
# 6️ Visualization Section
# ------------------------------------------------------------

plt.style.use("seaborn-v0_8")
sns.set_palette("viridis")

# ------------------------------------------------------------
# GDP Trends Over Time
# ------------------------------------------------------------
plt.figure(figsize=(9,6))
for c in df['Country'].unique():
    subset = df[df['Country'] == c]
    plt.plot(subset['Year'], subset['GDP (USD)'], marker='o', linewidth=1.5, label=c)
plt.title("GDP Trends (2010–2019)")
plt.xlabel("Year")
plt.ylabel("GDP (Billion USD)")
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=7)
save_fig("figures/gdp_trends")

# ------------------------------------------------------------
# Population Growth
# ------------------------------------------------------------
plt.figure(figsize=(9,6))
sns.lineplot(data=df, x="Year", y="Population", hue="Country", linewidth=1.5)
plt.title("Population Growth Over Time")
plt.ylabel("Population (Millions)")
plt.xlabel("Year")
save_fig("figures/population_growth")

# ------------------------------------------------------------
# Average Life Expectancy per Country
# ------------------------------------------------------------
avg_life = df.groupby("Country")["Life Expectancy"].mean().sort_values(ascending=False)
plt.figure(figsize=(9,6))
sns.barplot(x=avg_life.values, y=avg_life.index)
plt.title("Average Life Expectancy (2010–2019)")
plt.xlabel("Life Expectancy (Years)")
plt.ylabel("Country")
save_fig("figures/average_life_expectancy")

# ------------------------------------------------------------
# Average Unemployment Rate per Country
# ------------------------------------------------------------
avg_unemp = df.groupby("Country")["Unemployment Rate (%)"].mean().sort_values()
plt.figure(figsize=(9,6))
sns.barplot(x=avg_unemp.values, y=avg_unemp.index)
plt.title("Average Unemployment Rate by Country")
plt.xlabel("Unemployment Rate (%)")
plt.ylabel("Country")
save_fig("figures/average_unemployment")

# ------------------------------------------------------------
# CO₂ Emissions Over Time
# ------------------------------------------------------------
plt.figure(figsize=(9,6))
sns.lineplot(data=df, x="Year", y="CO2 Emissions (metric tons per capita)", hue="Country", linewidth=1.5)
plt.title("CO₂ Emissions Trends (2010–2019)")
plt.ylabel("CO₂ Emissions (metric tons per capita)")
save_fig("figures/co2_emissions_trend")

# ------------------------------------------------------------
# Access to Electricity Over Time
# ------------------------------------------------------------
plt.figure(figsize=(9,6))
sns.lineplot(data=df, x="Year", y="Access to Electricity (%)", hue="Country", linewidth=1.5)
plt.title("Access to Electricity Trends (2010–2019)")
plt.ylabel("Population with Access (%)")
save_fig("figures/access_to_electricity_trend")

# ------------------------------------------------------------
# Correlation Heatmap (Statistical Graph)
# ------------------------------------------------------------
plt.figure(figsize=(8,6))
corr = df[num_cols].corr()
sns.heatmap(corr, annot=True, cmap="coolwarm", fmt=".2f", square=True)
plt.title("Correlation Heatmap of Economic and Social Indicators")
save_fig("figures/correlation_heatmap")

# ------------------------------------------------------------
# GDP vs Life Expectancy (Scatter Plot)
# ------------------------------------------------------------
plt.figure(figsize=(8,6))
sns.scatterplot(
    data=df,
    x="GDP (USD)",
    y="Life Expectancy",
    hue="Country",
    size="Population",
    sizes=(30, 300),
    alpha=0.8
)
plt.title("GDP vs Life Expectancy (Bubble Plot)")
plt.xlabel("GDP (Billion USD)")
plt.ylabel("Life Expectancy (Years)")
save_fig("figures/gdp_vs_life_expectancy")

# ------------------------------------------------------------
# GDP vs CO2 Emissions
# ------------------------------------------------------------
plt.figure(figsize=(8,6))
sns.scatterplot(
    data=df,
    x="GDP (USD)",
    y="CO2 Emissions (metric tons per capita)",
    hue="Country",
    style="Country"
)
plt.title("GDP vs CO₂ Emissions per Capita")
plt.xlabel("GDP (Billion USD)")
plt.ylabel("CO₂ Emissions (metric tons per capita)")
save_fig("figures/gdp_vs_co2")

# ------------------------------------------------------------
# Relationship between Life Expectancy and Access to Electricity
# ------------------------------------------------------------
plt.figure(figsize=(8,6))
sns.scatterplot(
    data=df,
    x="Access to Electricity (%)",
    y="Life Expectancy",
    hue="Country"
)
plt.title("Access to Electricity vs Life Expectancy")
plt.xlabel("Access to Electricity (%)")
plt.ylabel("Life Expectancy (Years)")
save_fig("figures/electricity_vs_life_expectancy")

# ------------------------------------------------------------
# 7️ Additional Analysis - Global Trends
# ------------------------------------------------------------
global_yearly = df.groupby("Year").agg({
    "GDP (USD)": "mean",
    "Population": "mean",
    "Life Expectancy": "mean",
    "CO2 Emissions (metric tons per capita)": "mean"
}).reset_index()

plt.figure(figsize=(9,6))
sns.lineplot(data=global_yearly, x="Year", y="Life Expectancy", marker="o", linewidth=2)
plt.title("Global Average Life Expectancy (2010–2019)")
plt.ylabel("Years")
save_fig("figures/global_life_expectancy")

plt.figure(figsize=(9,6))
sns.lineplot(data=global_yearly, x="Year", y="CO2 Emissions (metric tons per capita)", marker="o", linewidth=2)
plt.title("Global CO₂ Emissions Trend (2010–2019)")
plt.ylabel("Metric tons per capita")
save_fig("figures/global_co2_trend")

# ------------------------------------------------------------
# 8️ Outlier Detection
# ------------------------------------------------------------
z_scores = np.abs(stats.zscore(df[num_cols]))
outliers = (z_scores > 3).sum(axis=0)
print("\nPotential outlier count per column:\n", outliers)

# ------------------------------------------------------------
# 9️ Summary of Key Insights
# ------------------------------------------------------------
print("\nKey Insights from EDA:")
print("- GDP has a strong positive correlation with life expectancy.")
print("- CO₂ emissions tend to increase with higher GDP values.")
print("- Countries with higher access to electricity generally have better health outcomes.")
print("- Unemployment rate shows weak correlation with other economic indicators.")
print("- The global life expectancy increased gradually between 2010–2019.")
print("- Median CO₂ emissions remain relatively stable despite GDP growth in many regions.")

print("\n All visualizations exported successfully as PNGs in the 'figures' folder.")
